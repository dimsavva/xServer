# x42 Server - Continuous Integration Setup for Azure DevOps

parameters:
  name: ''
  queue: ''
  platform: ''
  reason: '$(Build.Reason)'
  arch: 'x64' # Only overriden by 32-bit Windows
  configuration: 'Release' # Only do debug if specified

phases:
- phase: ${{ parameters.name }}
  displayName: ${{ format('x42 Server ({0}-{1})', parameters.platform, parameters.arch) }}
  queue: ${{ parameters.queue }}
  steps:

  - powershell: |
      $version = (Get-Content package.json) -join "`n" | ConvertFrom-Json | Select -ExpandProperty "version"
      Write-Host "##vso[task.setvariable variable=Build.BuildNumber]$version"
      Write-Host "##vso[task.setvariable variable=App.BuildNumber]$version" 
      Write-Host "BUILD_REASON: $Env:BUILD_REASON"
      Write-Host "BUILD_SOURCEBRANCH: $Env:BUILD_SOURCEBRANCH"
      Write-Host "BUILD_SOURCEBRANCHNAME: $Env:BUILD_SOURCEBRANCHNAME"
      Write-Host "SYSTEM_PULLREQUEST_PULLREQUESTID: $Env:SYSTEM_PULLREQUEST_PULLREQUESTID"
      Write-Host "SYSTEM_PULLREQUEST_PULLREQUESTNUMBER: $Env:SYSTEM_PULLREQUEST_PULLREQUESTNUMBER"
      Write-Host "SYSTEM_PULLREQUEST_SOURCEBRANCH: $Env:SYSTEM_PULLREQUEST_SOURCEBRANCH"
    displayName: version number

  - task: DotNetCoreCLI@2
    displayName: dotnet publish
    inputs:
      command: publish
      projects: '**/x42.Server.csproj'
      workingDirectory: 'x42-Server.D'
      publishWebProjects: false
      zipAfterPublish: false
      modifyOutputPath: false
      arguments: ${{ format('-c {0} -r {1}-{2} -v m', parameters.configuration, parameters.platform, parameters.arch) }}
      
  # Run all unit tests, by applying the "*.Tests.csproj" filter it should avoid IntegrationTests projects.
  # Only run tests on Linux.
  - task: DotNetCoreCLI@2
    displayName: dotnet test
    #condition: and(succeeded(), eq(variables['parameters.platform'], 'linux')) # Unable to get condition to work.
    inputs:
      command: test
      ${{ if eq(parameters.reason, 'Schedule') }}:
        projects: '**/*.Tests.csproj'
      ${{ if ne(parameters.reason, 'Schedule') }}:
        projects: '**/City.*.Tests.csproj'
      arguments: ${{ format('-c {0} -v m', parameters.configuration) }}

  - task: ArchiveFiles@2
    displayName: archive
    inputs:
      rootFolderOrFile: ${{ format('src/x42/bin/{0}/netcoreapp2.1/{1}-{2}/publish/', parameters.configuration, parameters.platform, parameters.arch) }}
      includeRootFolder: false

      ${{ if eq(parameters.platform, 'linux') }}:
        archiveFile: ${{ format('$(Build.ArtifactStagingDirectory)/x42-$(App.BuildNumber)-{0}-{1}.tar.gz', parameters.platform, parameters.arch) }}
        archiveType: tar
      ${{ if ne(parameters.platform, 'linux') }}:
        archiveFile: ${{ format('$(Build.ArtifactStagingDirectory)/x42-$(App.BuildNumber)-{0}-{1}.zip', parameters.platform, parameters.arch) }}  

  # Publish Build Artifacts
  # Publish build artifacts to Azure Pipelines/TFS or a file share
  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: '$(Build.ArtifactStagingDirectory)' 
      artifactName: 'drop' 
      #publishLocation: 'Container' # Options: container, filePath
      #targetPath: # Required when publishLocation == FilePath
      #parallel: false # Optional
      #parallelCount: # Optional

  - task: marcelo-formentao.github-tools.github-release-publish-task.GitHubReleasePublish@0
    displayName: github release
    condition: and(succeeded(), eq(variables['build.sourcebranch'], 'refs/heads/master'))
    inputs:
      githubEndpoint: github
      githubRepository: 'x42protocol/x42-Server'
      githubReleaseTitle: 'x42 (Release $(Build.BuildNumber))'
      githubReleasePrerelease: true
      githubReleaseAsset: '$(Build.ArtifactStagingDirectory)/x42*.*'
      manifestJson: package.json
      githubEditRelease: true